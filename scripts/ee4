#!/usr/bin/env bash

PROJECT_NAME="ee4"
ETC_HOSTS=/etc/hosts
LOCALHOST_IP="127.0.0.1"

# initOS discovers the operating system for this system.
initOS() {
	OS=$(echo `uname`|tr '[:upper:]' '[:lower:]')
}

# runs the given command as root (detects if we are root already)
runAsRoot() {
	local CMD="$*"

	if [ $EUID -ne 0 ]; then
		CMD="sudo $CMD"
	fi

	$CMD
}

# help provides possible cli arguments
help () {
	echo -e "\nUsage:  ee4 [Global Options|Commands]"
	echo -e "\nGlobal Options:"
	echo -e "\t[--help|-h ]\t\tprints this help"

	echo -e "\nCommands: "
	echo -e "\tcreate\t\t\tCreate new site"
    	echo -e "\tlist\t\t\tShow the list of created sites"
    	echo -e "\tdb\t\t\tEnter mysql shell"
	echo -e "\tdelete\t\t\tDelete existing site"
	echo -e "\trestart\t\t\tReload configuration for existing site"
	echo -e "\twp\t\t\tUse wp-cli with a site"
	echo -e "\tupdate\t\t\tUpdate ee4"

	echo -e "\nUsage:  ee4 create SITE [Options] [Suboptions]"
	echo -e "\nOptions:"
	echo -e "\t[--wp ]\t\t\tWordPress Site"
	echo -e "\t[--wpsubdir ]\t\tWordPress Multisite with Subdirectory"
	echo -e "\t[--wpsubdomain ]\tWordPress Multisite with Subdomains"
	echo -e "\nSuboptions:"
	echo -e "\t[--le]\t\t\tEnable LetsEncrypt Only with --wp"

	echo -e "\nUsage:  ee4 delete SITE"

	echo -e "\nUsage:  ee4 wp SITE [ARG...]"
	echo -e "\te.g. ee4 wp example.com theme list"
}

createWebroot()
{
	if ! [[ -d "$WEBROOT" ]]; then
		mkdir -p "$WEBROOT" > /dev/null 2>&1
		if [ "$?" -eq 1 ]; then
			runAsRoot mkdir -p "$WEBROOT" > /dev/null 2>&1
			runAsRoot chown -R "$USER": "$WEBROOT"
		fi
	fi
}

# show the list of sites
 listSites() {
     pushd $WEBROOT > /dev/null 2>&1
     SITE_LIST=$(find . -mindepth 2 -maxdepth 2 -name docker-compose.yml | xargs -I{} dirname {} | cut -c3-)
     popd > /dev/null 2>&1
     if [[ ${#SITE_LIST} -eq 0 ]]; then
         echo -e "No sites have been created."
     else
         echo -e "List of Sites:\n\n$SITE_LIST"
     fi
 }



singleWordPress() {
	createWebroot

	echo "Installing WordPress site $SITE_NAME"
	###
	#  Setup site configuration
	###
	echo "Configuring project..." && sleep 1
	mkdir -p "$WEBROOT/$SITE_NAME" > /dev/null 2>&1
	cp "$EE_INSTALL_DIR/docker-compose.yml" "$WEBROOT/$SITE_NAME"
	cp -r "$EE_INSTALL_DIR/config" "$WEBROOT/$SITE_NAME"
	mv "$WEBROOT/$SITE_NAME/config/.env.example" "$WEBROOT/$SITE_NAME/.env"
	sed -i.bak "s/\(VIRTUAL_HOST=\)\(site1.test\)/\1$SITE_NAME/" "$WEBROOT/$SITE_NAME/.env"
	sed -i.bak "/^.*LETSENCRYPT.*/d" "$WEBROOT/$SITE_NAME/docker-compose.yml"
	find "$WEBROOT/$SITE_NAME" -mindepth 1 -maxdepth 3 -name '*.bak' -exec rm {} \;

	###
	#  Setup site networking
	###
	echo "Configuring network..." && sleep 1
	runNginxProxyAndLetsEncrypt
	docker network create $SITE_NAME > /dev/null 2>&1
	docker network connect $SITE_NAME nginx-proxy

	###
	#  Start the containers
	###
	pushd "$WEBROOT/$SITE_NAME" > /dev/null 2>&1
		docker-compose up -d
	popd > /dev/null 2>&1

	echo "$SITE_NAME created."
	read -p "Would you like to add domain to /etc/host?(y/N) " -n 1 -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		addHost "$SITE_NAME"
		addHost "mail.$SITE_NAME"
	fi
}

singleWordPressLetsEncrypt() {
	createWebroot
	echo "Installing WordPress site $SITE_NAME"

	###
	#  Setup site configuration
	###
	echo "Configuring project..." && sleep 1
	mkdir -p "$WEBROOT/$SITE_NAME" > /dev/null 2>&1
	cp "$EE_INSTALL_DIR/docker-compose.yml" "$WEBROOT/$SITE_NAME"
	cp -r "$EE_INSTALL_DIR/config" "$WEBROOT/$SITE_NAME"
	mv "$WEBROOT/$SITE_NAME/config/.env.example" "$WEBROOT/$SITE_NAME/.env"
	sed -i.bak "s/\(VIRTUAL_HOST=\)\(site1.test\)/\1$SITE_NAME/" "$WEBROOT/$SITE_NAME/.env"
	find "$WEBROOT/$SITE_NAME" -mindepth 1 -maxdepth 3 -name '*.bak' -exec rm {} \;

	###
	#  Setup site networking
	###
	echo "Configuring network..." && sleep 1
	runNginxProxyAndLetsEncrypt
	docker network create $SITE_NAME > /dev/null 2>&1
	docker network connect $SITE_NAME nginx-proxy
	docker network connect $SITE_NAME letsencrypt

	###
	#  Start the containers
	###
	pushd "$WEBROOT/$SITE_NAME" > /dev/null 2>&1
		docker-compose up -d
	popd > /dev/null 2>&1

	echo "$SITE_NAME created."
	read -p "Would you like to add domain to /etc/host?(y/N) " -n 1 -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		addHost "$SITE_NAME"
		addHost "mail.$SITE_NAME"
	fi
}

multisiteSubdirectory() {
	echo "Installing WordPress Multisite with Subdirectory"
}

multisiteSubdomain() {
	echo "Installing WordPress Multisite with Subdomain"
}

deleteSingleWordPress() {
	read -p "Are you sure you want to delete the site?(y/N) " -n 1 -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		pushd "$WEBROOT/$SITE_NAME" > /dev/null 2>&1
			docker-compose down -v
		popd > /dev/null 2>&1

		sudo rm -rf "$WEBROOT/$SITE_NAME"
		docker network disconnect "$SITE_NAME" nginx-proxy
		if isContainerConnected letsencrypt; then
			docker network disconnect "$SITE_NAME" letsencrypt
		fi
		docker network rm "$SITE_NAME"
	fi
	removeHost "$SITE_NAME"
}

restartSingleWordPress() {
	pushd "$WEBROOT/$SITE_NAME" > /dev/null 2>&1
		docker-compose restart
	popd > /dev/null 2>&1
}

runWpCliCommand() {
	pushd "$WEBROOT/$SITE_NAME" > /dev/null 2>&1
		docker-compose exec --user=www-data php wp "${@}"
	popd > /dev/null 2>&1
}

useDbShell() {
	pushd "$WEBROOT/$SITE_NAME" > /dev/null 2>&1
		docker-compose exec db sh -c 'mysql -p$MYSQL_ROOT_PASSWORD'
	popd > /dev/null 2>&1
}

removeHost() {
	HOSTNAME=$1
	if [ -n "$(grep $HOSTNAME /etc/hosts)" ]; then
			echo "$HOSTNAME Found in your $ETC_HOSTS, Removing now...";
			sudo sed -i".bak" "/$HOSTNAME/d" $ETC_HOSTS
	else
			echo "$HOSTNAME was not found in your $ETC_HOSTS";
	fi
}

addHost() {
	HOSTNAME=$1
	HOSTS_LINE="$LOCALHOST_IP\t$HOSTNAME"
	echo
	if [ -n "$(grep $HOSTNAME /etc/hosts)" ]; then
		echo "$HOSTNAME already exists : $(grep $HOSTNAME $ETC_HOSTS)"
	else
		echo "Adding $HOSTNAME to your $ETC_HOSTS";
		sudo -- sh -c -e "echo '$HOSTS_LINE' >> /etc/hosts";

		if [ -n "$(grep $HOSTNAME /etc/hosts)" ]; then
			echo -e "$HOSTNAME was added succesfully \n $(grep $HOSTNAME /etc/hosts)";
		else
			echo "Failed to add $HOSTNAME, Try again!";
		fi
	fi
}

# check if ports 80 and 443 are free.
portsFree() {
	ports=( 80 443 )
	free=0
	for port in "${ports[@]}" ; do
		# count the number of occurrences of $port in output: 1 = in use; 0 = not in use
		if [[ "$OS" == 'linux' ]]; then
			checkPortCMD="netstat -lnp tcp | grep "
		elif [[ "$OS" == 'darwin' ]]; then
			checkPortCMD="netstat -anp tcp | grep LISTEN | grep "
		fi
		runAsRoot $checkPortCMD $port > /dev/null 2>&1
		if [ "$?" -eq 1 ]; then
			free=1
		fi
	done
	return $free
}

# check if nginx-proxy container is running
isNginxProxyRunning() {
	docker inspect -f '{{.State.Running}}' nginx-proxy > /dev/null 2>&1
	if [[ $? == 0 ]]; then
		return 0
	else
		# For any exit code other than 0, return 1.
		return 1
	fi
}

# check if Container is connected to network
isContainerConnected() {
	docker inspect -f '{{range $p, $conf := .NetworkSettings.Networks}}
	{{if ne $p "bridge"}}
	{{$p}}
	{{end}}
	{{end}}' $1 | grep $SITE_NAME > /dev/null 2>&1

	if [[ $? == 0 ]]; then
		return 0
	else
		return 1
	fi
}

# run jwilder/nginx-proxy and JrCs/docker-letsencrypt-nginx-proxy-companion container
runNginxProxyAndLetsEncrypt() {
	if ! isNginxProxyRunning; then
		if ! portsFree; then
			echo "Please make sure ports 80 and 443 are free."
		else
			docker run --name nginx-proxy --restart always -d -p 80:80 -p 443:443 \
				-v ~/.ee4/etc/nginx/certs:/etc/nginx/certs \
				-v ~/.ee4/etc/nginx/conf.d:/etc/nginx/conf.d \
				-v ~/.ee4/etc/nginx/htpasswd:/etc/nginx/htpasswd \
				-v ~/.ee4/etc/nginx/vhost.d:/etc/nginx/vhost.d \
				-v ~/.ee4/usr/share/nginx/html:/usr/share/nginx/html \
				-v /var/run/docker.sock:/tmp/docker.sock:ro \
				jwilder/nginx-proxy

			docker run -d --name letsencrypt \
				-v /var/run/docker.sock:/var/run/docker.sock:ro \
				--volumes-from nginx-proxy \
				jrcs/letsencrypt-nginx-proxy-companion
		fi
	fi
}

initEE4() {
	if ! [[ -d ~/.ee4 ]]; then
		mkdir ~/.ee4
	fi

	if [[ $# -eq 0 ]]; then
		read -p "Where would you like to create your sites(default: ~/Sites): "
		WEBROOT="${REPLY:-~/Sites}"
	elif [[ $# -eq 1 ]]; then
		WEBROOT="$1"
	fi

	echo "WEBROOT=$WEBROOT" >> ~/.ee4/config
}

updateEE4() {
	REPO_URL="${1:-https://github.com/EasyEngine/docker-compose-wordpress}"
	VERSION="${2:-master}"
	EE_TMP_ROOT="$(mktemp -dt ee-installer-XXXXXX)"
	EE_TMP_REPO="$EE_TMP_ROOT/docker-compose-wordpress"

	echo "Updating ee4"
	git clone -b "$VERSION" "$REPO_URL" "$EE_TMP_REPO"
	runAsRoot cp -r "$EE_TMP_REPO/*" "$EE_INSTALL_DIR"
	rm -rf "$EE_TMP_ROOT"
}

# Execution

if [[ -f ~/.ee4/config ]]; then
	grep 'WEBROOT' ~/.ee4/config  > /dev/null 2>&1
	if [[ $? -eq 0 ]]; then
		source ~/.ee4/config
	else
		initEE4
	fi
fi

initOS
# Parsing input arguments (if any)
export INPUT_ARGUMENTS="${@}"
set -u
if [[ $# -eq 0 ]]; then
	help
fi
while [[ $# -gt 0 ]]; do
	case $1 in
		'--help'|-h)
			help
			exit 0
			;;
		'create')
			shift
			if [[ $# -ne 0 ]]; then
				export SITE_NAME="${1}"
				shift
				if [[ $# -ne 0 ]]; then
					case $1 in
						'--wp')
							shift
							if [[ $# -ne 0 ]]; then
								case $1 in
									'--le')
										singleWordPressLetsEncrypt
										exit 0
										;;
								esac
							fi
							singleWordPress
							exit 0
							;;
						'--wpsubdir')
							singleWordPress
							exit 0
							;;
						'--wpsubdomain')
							singleWordPress
							exit 0
							;;
					esac
					shift
				else
					echo -e "Please provide type of site you want to create."
					exit 0
				fi
			else
				echo -e "Please provide name of site."
				exit 0
			fi
			;;
        'list')
                listSites
                ;;
		'delete')
				shift
				if [[ $# -ne 0 ]]; then
					export SITE_NAME="${1}"
					deleteSingleWordPress
				else
					echo -e "Please provide name of site."
					exit 0
				fi
			;;
		'db')
				shift
				if [[ $# -ne 0 ]]; then
					export SITE_NAME="${1}"
					useDbShell
				else
					echo -e "Please provide name of site."
					exit 0
				fi
			;;

		'init')
				shift
				if [[ $# -ne 0 ]]; then
					initEE4 $1
				else
					initEE4
				fi
			;;
		'restart')
				shift
				if [[ $# -ne 0 ]]; then
					export SITE_NAME="${1}"
					restartSingleWordPress
				else
					echo -e "Please provide name of site."
					exit 0
				fi
			;;
		'update')
			shift
			if [[ $# -eq 0 ]]; then
				updateEE4
				exit 0
			elif [[ $# -eq 1 ]]; then
				#statements
				updateEE4 $1 master
				exit 0
			elif [[ $# -eq 2 ]]; then
				updateEE4 $1 $2
				exit 0
			fi
			;;
		'wp')
			shift
			if [[ $# -ne 0 ]]; then
				export SITE_NAME="${1}"
				shift
				runWpCliCommand "${@}"
				exit 0
			else
				echo -e "Please provide name of site."
				exit 0
			fi
			;;
		*) exit 1
			;;
	esac
	shift
done
set +u
