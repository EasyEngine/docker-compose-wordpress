#!/usr/bin/env bash

PROJECT_NAME="ee4"
EE_INSTALL_DIR="/opt/$PROJECT_NAME"
ETC_HOSTS=/etc/hosts
LOCALHOST_IP="127.0.0.1"
WEBROOT="/var/www"

# runs the given command as root (detects if we are root already)
runAsRoot() {
	local CMD="$*"

	if [ $EUID -ne 0 ]; then
		CMD="sudo $CMD"
	fi

	$CMD
}

# help provides possible cli arguments
help () {
	echo -e "\nUsage:  ee4 [Global Options]"
	echo -e "\nGlobal Options:"
	echo -e "\t[--help|-h ]\t\tprints this help"

	echo -e "\nCommands: "
	echo -e "\tcreate\t\t\tCreate new site"
	echo -e "\tdelete\t\t\tDelete existing site"
	echo -e "\trestart\t\t\tReload configuration for existing site"
	echo -e "\twp\t\t\tUse wp-cli with a site"

	echo -e "\nUsage:  ee4 create SITE [Options]"
	echo -e "\nOptions:"
	echo -e "\t[--wp ]\t\t\tWordPress Site"
	echo -e "\t[--wpsubdir ]\t\tWordPress Multisite with Subdirectory"
	echo -e "\t[--wpsubdomain ]\tWordPress Multisite with Subdomains"

	echo -e "\nUsage:  ee4 delete SITE"

	echo -e "\nUsage:  ee4 wp SITE [ARG...]"
	echo -e "\te.g. ee4 wp example.com theme list"
}

singleWordPress() {
	echo "Installing WordPress site $SITE_NAME"
	mkdir -p "$WEBROOT" > /dev/null 2>&1

	###
	#  Setup site configuration
	###
	echo "Configuring project..." && sleep 1
	mkdir -p "$WEBROOT/$SITE_NAME" > /dev/null 2>&1
	cp "$EE_INSTALL_DIR/docker-compose.yml" "$WEBROOT/$SITE_NAME"
	cp -r "$EE_INSTALL_DIR/config" "$WEBROOT/$SITE_NAME"
	mv "$WEBROOT/$SITE_NAME/config/.env.example" "$WEBROOT/$SITE_NAME/.env"
	sed -i.bak "s/\(VIRTUAL_HOST=\)\(site1.test\)/\1$SITE_NAME/" "$WEBROOT/$SITE_NAME/.env"

	###
	#  Setup site networking
	###
	echo "Configuring network..." && sleep 1
	runNginxProxyAndLetsEncrypt
	docker network create $SITE_NAME
	docker network connect $SITE_NAME nginx-proxy

	###
	#  Start the containers
	###
	pushd "$WEBROOT/$SITE_NAME" > /dev/null 2>&1
		docker-compose up -d
	popd > /dev/null 2>&1

	echo "$SITE_NAME created."
	read -p "Would you like to add domain to /etc/host?(y/N) " -n 1 -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		addHost "$SITE_NAME"
	fi
}

singleWordPressLetsEncrypt() {
	echo "Installing WordPress site $SITE_NAME"
	mkdir -p "$WEBROOT" > /dev/null 2>&1

	###
	#  Setup site configuration
	###
	echo "Configuring project..." && sleep 1
	mkdir -p "$WEBROOT/$SITE_NAME" > /dev/null 2>&1
	cp "$EE_INSTALL_DIR/docker-compose.yml" "$WEBROOT/$SITE_NAME"
	cp -r "$EE_INSTALL_DIR/config" "$WEBROOT/$SITE_NAME"
	mv "$WEBROOT/$SITE_NAME/config/.env.example" "$WEBROOT/$SITE_NAME/.env"
	sed -i.bak "s/\(VIRTUAL_HOST=\)\(site1.test\)/\1$SITE_NAME/" "$WEBROOT/$SITE_NAME/.env"

	###
	#  Setup site networking
	###
	echo "Configuring network..." && sleep 1
	runNginxProxyAndLetsEncrypt
	docker network create $SITE_NAME
	docker network connect $SITE_NAME nginx-proxy
	docker network connect $SITE_NAME letsencrypt

	###
	#  Start the containers
	###
	pushd "$WEBROOT/$SITE_NAME" > /dev/null 2>&1
		docker-compose up -d
	popd > /dev/null 2>&1

	echo "$SITE_NAME created."
	read -p "Would you like to add domain to /etc/host?(y/N) " -n 1 -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		addHost "$SITE_NAME"
	fi
}

multisiteSubdirectory() {
	echo "Installing WordPress Multisite with Subdirectory"
}

multisiteSubdomain() {
	echo "Installing WordPress Multisite with Subdomain"
}

deleteSingleWordPress() {
	read -p "Are you sure you want to delete the site?(y/N) " -n 1 -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		pushd "$WEBROOT/$SITE_NAME" > /dev/null 2>&1
			docker-compose down -v
		popd > /dev/null 2>&1

		sudo rm -rf "$WEBROOT/$SITE_NAME"
		docker network disconnect "$SITE_NAME" nginx-proxy
		docker network rm "$SITE_NAME"
	fi
}

restartSingleWordPress() {
	pushd "$WEBROOT/$SITE_NAME" > /dev/null 2>&1
		docker-compose restart
	popd > /dev/null 2>&1
}

runWpCliCommand() {
	pushd "$WEBROOT/$SITE_NAME" > /dev/null 2>&1
		docker-compose exec --user=www-data php wp "${@}"
	popd > /dev/null 2>&1
}

removeHost() {
	HOSTNAME=$1
	if [ -n "$(grep $HOSTNAME /etc/hosts)" ]
	then
			echo "$HOSTNAME Found in your $ETC_HOSTS, Removing now...";
			sudo sed -i".bak" "/$HOSTNAME/d" $ETC_HOSTS
	else
			echo "$HOSTNAME was not found in your $ETC_HOSTS";
	fi
}

addHost() {
	HOSTNAME=$1
	HOSTS_LINE="$LOCALHOST_IP\t$HOSTNAME"
	echo
	if [ -n "$(grep $HOSTNAME /etc/hosts)" ]; then
		echo "$HOSTNAME already exists : $(grep $HOSTNAME $ETC_HOSTS)"
	else
		echo "Adding $HOSTNAME to your $ETC_HOSTS";
		sudo -- sh -c -e "echo '$HOSTS_LINE' >> /etc/hosts";

		if [ -n "$(grep $HOSTNAME /etc/hosts)" ]; then
			echo -e "$HOSTNAME was added succesfully \n $(grep $HOSTNAME /etc/hosts)";
		else
			echo "Failed to add $HOSTNAME, Try again!";
		fi
	fi
}

# check if ports 80 and 443 are free.
portsFree() {
	ports=( 80 443 )
	free=0
	for port in "${ports[@]}" ; do
		# count the number of occurrences of $port in output: 1 = in use; 0 = not in use
		result=$(ss -ln src :$port | grep -Ec -e "\<$port\>")
		if [ "$result" -eq 1 ]; then
			free=1
		fi
	done
	return $free
}

# check if nginx-proxy container is running
isNginxProxyRunning() {
	docker inspect -f '{{.State.Running}}' nginx-proxy > /dev/null 2>&1
	if [[ $? == 0 ]]; then
		return 0
	else
		# For any exit code other than 0, return 1.
		return 1
	fi
}

# run jwilder/nginx-proxy and JrCs/docker-letsencrypt-nginx-proxy-companion container
runNginxProxyAndLetsEncrypt() {
	if ! isNginxProxyRunning; then
		if ! portsFree; then
			echo "Please make sure ports 80 and 443 are free."
		else
			docker run --name nginx-proxy --restart always -d -p 80:80 -p 443:443 \
				-v /etc/nginx/htpasswd:/etc/nginx/htpasswd \
				-v /etc/nginx/certs:/etc/nginx/certs \
				-v /etc/nginx/vhost.d \
				-v /usr/share/nginx/html \
				-v /etc/nginx/conf.d:/etc/nginx/conf.d \
				-v /var/run/docker.sock:/tmp/docker.sock:ro \
				jwilder/nginx-proxy

			docker run -d --name letsencrypt \
				-v /var/run/docker.sock:/var/run/docker.sock:ro \
				--volumes-from nginx-proxy \
				jrcs/letsencrypt-nginx-proxy-companion
		fi
	fi
}

# fail_trap is executed if an error occurs.
fail_trap() {
	result=$?
	if [ "$result" != "0" ]; then
		if [[ -n "$INPUT_ARGUMENTS" ]]; then
			echo "Failed to run with the arguments provided: $INPUT_ARGUMENTS"
			help
		else
			help
		fi
		echo -e "\tFor support, go to https://github.com/EasyEngine/docker-compose-wordpress."
	fi
	exit $result
}


# Execution

#Stop execution on any error
trap "fail_trap" EXIT
set -e

# Parsing input arguments (if any)
export INPUT_ARGUMENTS="${@}"
set -u
if [[ $# -eq 0 ]]; then
	help
fi
while [[ $# -gt 0 ]]; do
	case $1 in
		'--help'|-h)
			help
			exit 0
			;;
		'create')
			shift
			if [[ $# -ne 0 ]]; then
				export SITE_NAME="${1}"
				shift
				if [[ $# -ne 0 ]]; then
					case $1 in
						'--wp')
							shift
							if [[ $# -ne 0 ]]; then
								case $1 in
									'--le')
										singleWordPressLetsEncrypt
										exit 0
										;;
								esac
							fi
							singleWordPress
							exit 0
							;;
						'--wpsubdir')
							singleWordPress
							exit 0
							;;
						'--wpsubdomain')
							singleWordPress
							exit 0
							;;
					esac
					shift
				else
					echo -e "Please provide type of site you want to create."
					exit 0
				fi
			else
				echo -e "Please provide name of site."
				exit 0
			fi
			;;
		'delete')
				shift
				if [[ $# -ne 0 ]]; then
					export SITE_NAME="${1}"
					deleteSingleWordPress
				else
					echo -e "Please provide name of site."
					exit 0
				fi
			;;
		'restart')
				shift
				if [[ $# -ne 0 ]]; then
					export SITE_NAME="${1}"
					restartSingleWordPress
				else
					echo -e "Please provide name of site."
					exit 0
				fi
			;;
		'wp')
			shift
			if [[ $# -ne 0 ]]; then
				export SITE_NAME="${1}"
				shift
				runWpCliCommand "${@}"
				exit 0
			else
				echo -e "Please provide name of site."
				exit 0
			fi
			;;
		*) exit 1
			;;
	esac
	shift
done
set +u
