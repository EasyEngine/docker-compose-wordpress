#!/usr/bin/env bash

PROJECT_NAME="eev4"
EE_INSTALL_DIR="/opt/$PROJECT_NAME"

# runs the given command as root (detects if we are root already)
runAsRoot() {
	local CMD="$*"

	if [ $EUID -ne 0 ]; then
		CMD="sudo $CMD"
	fi

	$CMD
}

# help provides possible cli arguments
help () {
	echo -e "\nUsage:  eev4 [Global Options]"
	echo -e "\nGlobal Options:"
	echo -e "\t[--help|-h ]\t\tprints this help"

	echo -e "\nCommands: "
	echo -e "\tcreate\t\t\tCreate new site"

	echo -e "\nUsage:  eev4 create SITE [Options]"
	echo -e "\nOptions:"
	echo -e "\t[--wp ]\t\t\tWordPress Site"
	echo -e "\t[--wpsubdir ]\t\tWordPress Multisite with Subdirectory"
	echo -e "\t[--wpsubdomain ]\tWordPress Multisite with Subdomains"
}

singleWordPress() {
	echo "Installing WordPress site $SITE_NAME"
	WEBROOT="/var/www"
	mkdir -p "$WEBROOT" > /dev/null 2>&1
	runAsRoot chown -R www-data: "$WEBROOT"

	###
	#  Setup site configuration
	###
	echo "Configuring project..." && sleep 1
	mkdir -p "$WEBROOT/$SITE_NAME" > /dev/null 2>&1
	cp "$EE_INSTALL_DIR/docker-compose.yml" "$WEBROOT/$SITE_NAME"
	cp -r "$EE_INSTALL_DIR/config" "$WEBROOT/$SITE_NAME"
	mv "$WEBROOT/$SITE_NAME/config/.env.example" "$WEBROOT/$SITE_NAME/.env"

	###
	#  Setup site networking
	###
	echo "Configuring network..." && sleep 1
	runNginxProxy
	docker network create $SITE_NAME
	docker network connect $SITE_NAME nginx-proxy

	###
	#  Start the containers
	###
	echo "Starting containers..." && sleep 1
	docker-compose up -d
	chown -R www-data: "$WEBROOT/$SITE_NAME/wordpress"
}

multisiteSubdirectory() {
	echo "Installing WordPress Multisite with Subdirectory"
}

multisiteSubdomain() {
	echo "Installing WordPress Multisite with Subdomain"
}

# check if ports 80 and 443 are free.
portsFree() {
	ports=( 80 443 )
	free=0
	for port in "${ports[@]}" ; do
		# count the number of occurrences of $port in output: 1 = in use; 0 = not in use
		result=$(ss -ln src :$port | grep -Ec -e "\<$port\>")
		if [ "$result" -eq 1 ]; then
			free=1
		fi
	done
	return $free
}

# check if nginx-proxy container is running
isNginxProxyRunning() {
	docker inspect -f '{{.State.Running}}' nginx-proxy > /dev/null 2>&1
	if [[ $? == 0 ]]; then
		return 0
	else
		# For any exit code other than 0, return 1.
		return 1
	fi
}

# run jwilder/nginx-proxy container
runNginxProxy() {
	if ! isNginxProxyRunning; then
		if ! portsFree; then
			echo "Please make sure ports 80 and 443 are free."
		else
			docker run --name nginx-proxy --restart always -d -p 80:80 -p 443:443 \
				-v /etc/nginx/htpasswd:/etc/nginx/htpasswd \
				-v /etc/nginx/certs:/etc/nginx/certs \
				-v /etc/nginx/conf.d:/etc/nginx/conf.d \
				-v /var/run/docker.sock:/tmp/docker.sock:ro \
				jwilder/nginx-proxy
		fi
	fi
}

# fail_trap is executed if an error occurs.
fail_trap() {
  result=$?
  if [ "$result" != "0" ]; then
    if [[ -n "$INPUT_ARGUMENTS" ]]; then
      echo "Failed to run with the arguments provided: $INPUT_ARGUMENTS"
      help
    else
      help
    fi
    echo -e "\tFor support, go to https://github.com/EasyEngine/docker-compose-wordpress."
  fi
  exit $result
}


# Execution

#Stop execution on any error
trap "fail_trap" EXIT
set -e

# Parsing input arguments (if any)
export INPUT_ARGUMENTS="${@}"
set -u
if [[ $# -eq 0 ]]; then
	help
fi
while [[ $# -gt 0 ]]; do
	case $1 in
		'--help'|-h)
			help
			exit 0
			;;
		'create')
			shift
			if [[ $# -ne 0 ]]; then
				export SITE_NAME="${1}"
				shift
				if [[ $# -ne 0 ]]; then
					case $1 in
						'--wp')
							singleWordPress
							exit 0
							;;
						'--wpsubdir')
							multisiteSubdirectory
							exit 0
							;;
						'--wpsubdomain')
							multisiteSubdomain
							exit 0
							;;
					esac
					shift
				else
					echo -e "Please provide type of site you want to create."
					exit 0
				fi
			else
				echo -e "Please provide name of site."
				exit 0
			fi
			;;
		'wp')
			shift
			if [[ $# -ne 0 ]]; then
				export SITE_NAME="${1}"
			else
				echo -e "Please provide name of site."
				exit 0
			fi
			;;
		*) exit 1
			;;
	esac
	shift
done
set +u
